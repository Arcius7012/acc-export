#Область ОбработчикиСобытийФормы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Лог_Отладка(НСтр("ru='Запуск выгрузки в сонар'"), Истина);
		
	УстановитьЗаголовокФормы();
	
	//При открытии обработки в другой конфигурации, слетает реквизит на строковый и обработка падает с ошибкой.
	Если ТипЗнч(Конфигурация) <> Тип("СправочникСсылка.Конфигурации") Тогда		
		
		Лог_Отладка(НСтр("ru='Неправильный реквизит обработки ""Конфигурация"".'"), Истина);
		ПараметрыЗаполненыКорректно = Ложь;		
		
	Иначе	
		
		ОбработатьПараметрыЗапуска();
		ПостОбработкаВывестиПараметрыВСообщения();
		ПараметрыЗаполненыКорректно = ПроверитьЗаполнениеПараметровОбработки();
		
	КонецЕсли;
	
	Если Не РежимОтладки Тогда
		
		Если ПараметрыЗаполненыКорректно Тогда			
			ВыгрузитьОшибки();                			
		Иначе                                 			
			Лог_Отладка(НСтр("ru='Параметры заданы некорректно'"), Истина); 			
		КонецЕсли;
		
		Отказ = Истина;
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ПустаяСтрока(ФорматЭкспорта) Тогда
		ФорматЭкспорта = ФорматЭкспортаReportJSON;
		УстановитьЗначениеФорматаЭкспортаНаФорме(ФорматЭкспорта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура КаталогПроектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// перевести в немодальное
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выбор каталога проекта";
	Если Диалог.Выбрать() Тогда
		КаталогПроекта = Диалог.Каталог + ПолучитьРазделительПути();
		ПостОбработкаПараметров();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФорматЭкспортаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ВыгрузитьОшибки();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрочитатьФайлПараметров(Кнопка)
	
	СтандартнаяОбработка = Ложь;
	// перевести в немодальное
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Укажите файл параметров acc.properties";
	Диалог.Фильтр = "acc.properties|acc.properties";
	Если Диалог.Выбрать() Тогда
		
		ПрочитатьФайлПараметров(Диалог.ПолноеИмяФайла);
		ПостОбработкаПараметров();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПолучитьТекстДляФайлаПараметров(Кнопка)
	
	массивСтрок = Новый Массив;
	
	массивСтрок.Добавить("acc.projectKey=" + Конфигурация.Наименование);
	массивСтрок.Добавить("acc.catalog=" + КаталогПроекта);
	массивСтрок.Добавить("acc.result=" + СтрЗаменить(ИмяФайлаРезультата, КаталогПроекта, "./"));
	массивСтрок.Добавить("acc.sources=" + СтрЗаменить(КаталогИсходныхКодов, КаталогПроекта, "./"));
	массивСтрок.Добавить("acc.check=" + Формат(ВыполнятьПроверку, "БЛ=false; БИ=true"));
	массивСтрок.Добавить("acc.format=" + ФорматЭкспорта);
	массивСтрок.Добавить("acc.titleError=" + ФорматПредставленияОшибки);
	массивСтрок.Добавить("acc.relativePathToFiles=" + Формат(ВыводитьОтносительныеПути, "БЛ=false; БИ=true"));
	массивСтрок.Добавить("acc.objectErrors=" + Формат(ВыводитьОшибкиОбъектов, "БЛ=false; БИ=true"));
	массивСтрок.Добавить("acc.recreateProject=" + Формат(ПересоздатьКонфигурацию, "БЛ=false; БИ=true"));
	массивСтрок.Добавить("acc.exportRules=" + Формат(ВыгружатьПравила, "БЛ=false; БИ=true"));
	массивСтрок.Добавить("acc.logLevel=" + УровеньЛогирования);
	
	ВвестиСтроку(СтрСоединить(массивСтрок, Символы.ПС), , , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьОшибки()
	
	ПересоздатьКонфигурацию();
	ЗапускПроверки();
	ИнициализироватьПервичныеДанные();
	ЭкспортироватьОшибкиАПК();
	
КонецПроцедуры

Процедура ПересоздатьКонфигурацию()
	
	Если Не (ЗначениеЗаполнено(Конфигурация)
			И ПересоздатьКонфигурацию) Тогда
		Возврат;
	КонецЕсли;
	
	новКонфигурация = Конфигурация.Скопировать();
	новКонфигурация.ЭтоКопия = Ложь;
	новКонфигурация.ОбъектКопия = Неопределено;
	новКонфигурация.Записать();
	
	старКонфигурацияОбъект = Конфигурация.ПолучитьОбъект();
	старКонфигурацияОбъект.Наименование = "Удалить_" + старКонфигурацияОбъект.Наименование;
	старКонфигурацияОбъект.Записать();
	
	Конфигурация = новКонфигурация.Ссылка;
	
КонецПроцедуры

Процедура ЗапускПроверки()
	
	Если Не ВыполнятьПроверку
		Или Не ЗначениеЗаполнено(Конфигурация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыводитьСообщения = УровеньЛогирования = 2;
	
	Лог_Отладка("Начало проверки конфигурации " + ТекущаяДата(), ВыводитьСообщения);
	
	ФормаЗапускаПроверки = ПолучитьФорму("Обработка.ЗапускПроверки.Форма");
	ФормаЗапускаПроверки.ОбработкаОбъект.ПоказыватьПредупреждения = Ложь;
	ФормаЗапускаПроверки.Конфигурация = Конфигурация;
	ФормаЗапускаПроверки.РегистрироватьВсеОшибкиКакОсобенности = Ложь;
	ФормаЗапускаПроверки.Открыть();
	ТекстОшибки = ФормаЗапускаПроверки.ВыполнитьПроверку();
	ФормаЗапускаПроверки.Закрыть();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Лог_Отладка("При выполнении проверки произошла ошибка: ", ВыводитьСообщения);
		Лог_Отладка(ТекстОшибки, ВыводитьСообщения);
		
	КонецЕсли;
	
	Лог_Отладка("Окончание проверки конфигурации " + ТекущаяДата(), ВыводитьСообщения);
	
КонецПроцедуры

Процедура УстановитьЗначениеФорматаЭкспортаНаФорме(Знач ВходящееЗначение)
	
	Элемент = ЭтаФорма.ЭлементыФормы.ФорматЭкспорта;
	СписокВыборка = Элемент.СписокВыбора;
	
	ВходящееЗначение = нРег(ВходящееЗначение);
	Значение = СписокВыборка.НайтиПоЗначению(ВходящееЗначение);
	Элемент.Значение = Значение;
	
КонецПроцедуры

Процедура УстановитьЗаголовокФормы()
	
	ВыводитьСообщения = УровеньЛогирования = 2;
	Лог_Отладка("Версия обработки " + ВерсияОбработки, ВыводитьСообщения);
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " v." + ВерсияОбработки;
	
КонецПроцедуры

#Область ОбработкаПараметров

Процедура ОбработатьПараметрыЗапуска()
	
	// Порядок чтения параметров
	// Файл параметров берется из аргумента, если не указан, то ищется рядом с обработкой
	// Параметры читаются из аргументов, если не указаны, то из файла параметров
	
	ПутьКФайлуПараметров = "";
	
	ПутьКФайлуОбработки = АбсолютныйПуть(ИспользуемоеИмяФайла);
	
	РежимОтладки = Не ЗначениеЗаполнено(ПараметрЗапуска);
	
	Аргументы = СтрРазделить(ПараметрЗапуска, ";", Ложь);
	ФайлОбработки = Новый Файл(ИспользуемоеИмяФайла);
	ПутьКФайлуОбработки = ФайлОбработки.Путь;
	
	Для каждого цАргумент Из Аргументы Цикл
		
		ЗаполнитьПараметр(цАргумент, "acc.propertiesPaths", ПутьКФайлуПараметров);
		Если вРег(цАргумент) = "/DEBUG" Тогда // за счет параметра открываем для отладки в клиенте
			РежимОтладки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуПараметров) Тогда
		
		ПутьКФайлуПараметров = ПутьКФайлуОбработки + "acc.properties";
		
	КонецЕсли;
	
	ПрочитатьФайлПараметров(ПутьКФайлуПараметров);
	
	Для каждого цАргумент Из Аргументы Цикл
		
		ПрочитатьПараметрыВСтроке(цАргумент);
		
	КонецЦикла;
	
	ОбеспечитьАбсолютныйПутьККаталогу(ПутьКФайлуОбработки);
	ПостОбработкаПараметров();
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметровОбработки()
	
	Результат 			= Истина;
	ВыводитьСообщения 	= УровеньЛогирования = 1 Или УровеньЛогирования = 2;	
	
	Если Конфигурация.Пустая() Тогда
		Результат = Ложь;
		
		Лог_Отладка(НСтр("ru='Конфигурация не найдена(acc.projectKey)'"), ВыводитьСообщения);
	КонецЕсли;
	
	Если Не КаталогСуществует(КаталогПроекта) Тогда
		Результат = Ложь;
		
		Лог_Отладка(НСтр("ru='Каталог проекта не найден(acc.catalog)'"), ВыводитьСообщения);
	КонецЕсли;
	
	Если Не КаталогСуществует(КаталогИсходныхКодов) Тогда
		Результат = Ложь;
		
		Лог_Отладка(НСтр("ru='Каталог исходных кодов не найден(acc.sources)'"), ВыводитьСообщения);
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматЭкспорта) Тогда
		Результат = Ложь;
		
		Лог_Отладка(НСтр("ru='Формат экспорта не задан(acc.format)'"), ВыводитьСообщения);
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматПредставленияОшибки) Тогда
		Результат = Ложь;
		
		Лог_Отладка(НСтр("ru='Формат представления ошибки не задан(acc.titleError)'"), ВыводитьСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьПараметрыВСтроке(Знач СтрокаСПараметром)
	
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.projectKey", ИмяПроекта);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.catalog", КаталогПроекта);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.result", ИмяФайлаРезультата);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.sources", КаталогИсходныхКодов);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.check", ЗначениеПараметра_ВыполнятьПроверку);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.format", ФорматЭкспорта);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.titleError", ФорматПредставленияОшибки);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.relativePathToFiles", ЗначениеПараметра_ОтносительныеПутиКФайлам);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.objectErrors", ЗначениеПараметра_ВыводитьОшибкиОбъектов);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.recreateProject", ЗначениеПараметра_ПересоздатьКонфигурацию);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.exportRules", ЗначениеПараметра_ВыгружатьПравила);
	ЗаполнитьПараметр(СтрокаСПараметром, "acc.logLevel", УровеньЛогирования);
	
КонецПроцедуры

Процедура ЗаполнитьПараметр(Знач СтрокаПараметра, Знач ИмяПараметра, ЗначениеПараметра)
	
	текСтрокаВРег = ВРег(СтрокаПараметра);
	
	Если Не СтрНачинаетсяС(текСтрокаВРег, ВРег(ИмяПараметра)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	позРавно = СтрНайти(СтрокаПараметра, "=");
	
	Если позРавно = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра, позРавно + 1));
	
	ВыводитьСообщения = УровеньЛогирования = 2;
	Лог_Отладка("Найден параметр " + ИмяПараметра + " = " + ЗначениеПараметра, ВыводитьСообщения);
	
КонецПроцедуры

Процедура ПрочитатьФайлПараметров(Знач ПутьКФайлуПараметров)
	
	ВыводитьСообщения = УровеньЛогирования = 2;
	Лог_Отладка(СтрШаблон("Читаю файл параметров %1", ПутьКФайлуПараметров), ВыводитьСообщения);
	
	ПутьКФайлуПараметров = АбсолютныйПуть(ПутьКФайлуПараметров);
	
	Если Не фФайлСуществует(ПутьКФайлуПараметров) Тогда
		Лог_Отладка(СтрШаблон("Файл параметров %1 не найден.", ПутьКФайлуПараметров), ВыводитьСообщения);
		Возврат;
	КонецЕсли;
	
	чтениеФайлаПараметров = Новый ТекстовыйДокумент;
	чтениеФайлаПараметров.Прочитать(ПутьКФайлуПараметров, КодировкаТекста.UTF8);
	
	Для ц = 0 По чтениеФайлаПараметров.КоличествоСтрок() Цикл
		
		текСтрока = чтениеФайлаПараметров.ПолучитьСтроку(ц);
		
		//Комментарии пропускаем
		Если текСтрока = ""
			Или Лев(текСтрока, 1) = "#" Тогда			
			Продолжить;			
		КонецЕсли;
		
		ПрочитатьПараметрыВСтроке(текСтрока);
		
	КонецЦикла;
	
	чтениеФайлаПараметров = Неопределено;
	
	ОбеспечитьАбсолютныйПутьККаталогу(КаталогРодитель(ПутьКФайлуПараметров));
	
КонецПроцедуры

Процедура ОбеспечитьАбсолютныйПутьККаталогу(Знач КаталогРодитель)
	
	Если Не ЗначениеЗаполнено(КаталогПроекта) Тогда
		Возврат;
	КонецЕсли;
	
	ВыводитьСообщения = УровеньЛогирования = 2; 
	
	Лог_Отладка(СтрШаблон(
			"Вычисление пути к каталогу проекта. Текущий путь = %1, каталог-родитель = %2",
			КаталогПроекта,
			КаталогРодитель), ВыводитьСообщения);
	
	Если Не СтрНачинаетсяС(КаталогПроекта, ".") Тогда
		
		Если КаталогСуществует(КаталогПроекта) Тогда
			
			// каталог найден и существует
			
			Лог_Отладка(СтрШаблон("Текущий путь = %1", КаталогПроекта), ВыводитьСообщения);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КаталогРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = ПреобразоватьПуть(КаталогПроекта, КаталогРодитель);
	
	Лог_Отладка(СтрШаблон("Вычисление по родителю = %1", Каталог), ВыводитьСообщения);
	
	Если КаталогСуществует(Каталог) Тогда
		
		// каталог найден и существует
		
		КаталогПроекта = АбсолютныйПуть(Каталог);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПостОбработкаПараметров()
	
	ОбеспечитьАбсолютныйПутьККаталогуИсходныхКодов();
	
	Если ЗначениеЗаполнено(ИмяПроекта) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	Конфигурации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Конфигурации КАК Конфигурации
			|ГДЕ
			|	Конфигурации.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ИмяПроекта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Конфигурация = Выборка.Ссылка;
			
		Иначе
			
			Конфигурация = Справочники.Конфигурации.ПустаяСсылка();
			
			ВыводитьСообщения = УровеньЛогирования = 1 Или УровеньЛогирования = 2;
			Лог_Отладка(НСтр("ru='Не найдена конфигурация для проверки'"), ВыводитьСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КаталогПроекта = АбсолютныйПуть(КаталогПроекта);
	
	Если ВыводитьОтносительныеПути Тогда
		
		КаталогИсходныхКодов = СтрЗаменить(КаталогИсходныхКодов, "\", "/"); // Заменяем на прямые слешы, т.к. их не придется экранировать в джсоне
		
	Иначе
		
		КаталогИсходныхКодов = АбсолютныйПуть(КаталогИсходныхКодов);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогПроекта)
		И Не СтрЗаканчиваетсяНа(КаталогПроекта, "/") Тогда
		
		КаталогПроекта = КаталогПроекта + "/";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогИсходныхКодов)
		И Не СтрЗаканчиваетсяНа(КаталогИсходныхКодов, "/") Тогда
		
		КаталогИсходныхКодов = КаталогИсходныхКодов + "/";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФорматПредставленияОшибки) Тогда
		ФорматПредставленияОшибки = ФорматОшибкиКодНаименование;
	КонецЕсли;
	
	ВыполнятьПроверку = Значение_Истина(ЗначениеПараметра_ВыполнятьПроверку);
	ВыводитьОтносительныеПути = Значение_Истина(ЗначениеПараметра_ОтносительныеПутиКФайлам);
	ВыводитьОшибкиОбъектов = Значение_Истина(ЗначениеПараметра_ВыводитьОшибкиОбъектов);
	ПересоздатьКонфигурацию = Значение_Истина(ЗначениеПараметра_ПересоздатьКонфигурацию);
	ВыгружатьПравила = Значение_Истина(ЗначениеПараметра_ВыгружатьПравила);
	
	Если ЗначениеЗаполнено(КаталогПроекта) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФайлаРезультата) Тогда
			
			Если нРег(ФорматЭкспорта) = ФорматЭкспортаGenericIssue Тогда
				ИмяФайлаРезультата = АбсолютныйПуть(КаталогПроекта + ПолучитьРазделительПути() + "acc-generic-issue.json");
			Иначе
				ИмяФайлаРезультата = АбсолютныйПуть(КаталогПроекта + ПолучитьРазделительПути() + "acc-json.json");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтрНайти(ИмяФайлаРезультата, ":") Тогда
			
			// Передан относительный путь	
			ИмяФайлаРезультата = АбсолютныйПуть(ПреобразоватьПуть(ИмяФайлаРезультата, КаталогПроекта));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УровеньЛогирования) Тогда
		УровеньЛогирования = 0;
	КонецЕсли;
КонецПроцедуры

Функция Значение_Истина(Знач пСтроковоеЗначениеПараметра)
	
	ВРегЗначение = ВРег(пСтроковоеЗначениеПараметра);
	Возврат ВРегЗначение = "TRUE" ИЛИ ВРегЗначение = "1" ИЛИ ВРегЗначение = "ИСТИНА";
	
КонецФункции

Процедура ОбеспечитьАбсолютныйПутьККаталогуИсходныхКодов()
	
	Если ПустаяСтрока(КаталогИсходныхКодов) Тогда
		КаталогИсходныхКодов = "./src";
	КонецЕсли;
	
	ВыводитьСообщения = УровеньЛогирования = 2;
	Лог_Отладка("Вычисление пути к исходникам", ВыводитьСообщения);
	
	КаталогИсходныхКодов = НайтиКаталогИсходныхКодов();
	
	Лог_Отладка("Текущий каталог исходных кодов: " + КаталогИсходныхКодов, ВыводитьСообщения);
	
	Лог_Отладка("Уточнение каталога по файлам конфигурации", ВыводитьСообщения);
	
	найденныеФайлы = НайтиФайлы(КаталогИсходныхКодов, "Configuration.xml", Истина);
	
	Если найденныеФайлы.Количество() > 0 Тогда
		
		ЭтоВыгрузкаEDT = Ложь;
		
		КаталогИсходныхКодов = найденныеФайлы[0].Путь;
		
		Лог_Отладка("Найден файл Configuration.xml: " + найденныеФайлы[0].ПолноеИмя, ВыводитьСообщения);
		Лог_Отладка("Это выгрузка конфигуратора", ВыводитьСообщения);
		Лог_Отладка("Каталог исходных файлов: " + КаталогИсходныхКодов, ВыводитьСообщения);
		Возврат;
		
	КонецЕсли;
	
	найденныеФайлы = НайтиФайлы(КаталогИсходныхКодов, "Configuration.mdo", Истина);
	
	Если найденныеФайлы.Количество() > 0 Тогда
		
		ЭтоВыгрузкаEDT = Истина;
		
		КаталогИсходныхКодов = КаталогРодитель(найденныеФайлы[0].Путь);
		
		Лог_Отладка("Найден файл Configuration.mdo: " + найденныеФайлы[0].ПолноеИмя, ВыводитьСообщения);
		Лог_Отладка("Это выгрузка EDT", ВыводитьСообщения);
		Лог_Отладка("Каталог исходных файлов: " + КаталогИсходныхКодов, ВыводитьСообщения);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru='Не удалось определить тип выгрузки. Возможно каталог исходных кодов задан не верно.'");
	ВыводитьСообщения = УровеньЛогирования = 1 Или УровеньЛогирования = 2;
	Лог_Отладка(ОписаниеОшибки, ВыводитьСообщения);
			
КонецПроцедуры

Функция НайтиКаталогИсходныхКодов()
	
	ВыводитьСообщения 	= УровеньЛогирования = 2;
	ЭтоПолныйПуть 		= СтрНайти(КаталогИсходныхКодов, ":") > 0;
	
	Если ЭтоПолныйПуть Тогда		
		КаталогДляПроверки = КаталогИсходныхКодов;		
	Иначе		
		КаталогДляПроверки = ПреобразоватьПуть(КаталогИсходныхКодов, КаталогПроекта);		
	КонецЕсли;
	
	Если КаталогСуществует(КаталогДляПроверки) Тогда		
		// если каталог исходных был задан не относительный - запрещаем выводить относительные
		ВыводитьОтносительныеПути = Не ЭтоПолныйПуть;
		
		Лог_Отладка("Каталог исходных файлов по переданному пути: " + КаталогДляПроверки, ВыводитьСообщения);		
		Возврат КаталогДляПроверки;		
	Иначе		
		Лог_Отладка("Не удалось определить каталог исходных кодов как [каталог проекта] + [каталог исходных кодов]", ВыводитьСообщения); 		
		Возврат "";		
	КонецЕсли;
	
КонецФункции

Процедура ПостОбработкаВывестиПараметрыВСообщения()
	
	ВыводитьСообщения 	= УровеньЛогирования = 2;
	
	ТекстПараметров = "
	|Имя проекта = " + ИмяПроекта + "
	|Конфигурация = " + Конфигурация + ", код: " + Конфигурация.Код + "
	|Каталог проекта = " + КаталогПроекта + "
	|Файл результата = " + ИмяФайлаРезультата + "
	|Каталог исходников = " + КаталогИсходныхКодов + "
	|Выполнять проверку = " + ВыполнятьПроверку + "
	|Формат экспорта = " + ФорматЭкспорта + "
	|Выгружать правила = " + ВыгружатьПравила;
	
	Лог_Отладка(ТекстПараметров, ВыводитьСообщения);
	
КонецПроцедуры

Функция ПреобразоватьПуть(Знач ИсходныйПуть, Знач КаталогРодитель)
	
	Уровень 		= СтрЧислоВхождений(ИсходныйПуть, "../");	
	Путь 			= "";
	Разделитель		= ПолучитьРазделительПути();
	КаталогРодитель = СтрЗаменить(КаталогРодитель, "/", Разделитель);
	ИсходныйПуть	= СтрЗаменить(ИсходныйПуть, "../", "");
	ИсходныйПуть	= СтрЗаменить(ИсходныйПуть, "./", "");
	
	Если Уровень > 0 Тогда
		Уровень 				= Уровень + 1;
		КаталогРодительПоПапкам = СтрРазделить(КаталогРодитель, Разделитель, Ложь);
		ВсегоПапок				= КаталогРодительПоПапкам.Количество();
		
		Если Уровень > ВсегоПапок Тогда
			Возврат "";				
		КонецЕсли;
		
		Для Сч = 0 По ВсегоПапок - Уровень Цикл
			Путь = Путь + КаталогРодительПоПапкам[Сч] + Разделитель;	
		КонецЦикла;
	Иначе
		Путь = КаталогРодитель + Разделитель;
	КонецЕсли;
	
	Возврат Путь + ИсходныйПуть;
КонецФункции

#КонецОбласти

#Область ФайловыеОперации

Функция АбсолютныйПуть(Знач пПуть)
	
	Файл = Новый Файл(пПуть);
	Возврат СтрЗаменить(Файл.ПолноеИмя, "\", "/"); // Заменяем на прямые слешы, т.к. из не придется экранировать в джсоне
	
КонецФункции

Функция КаталогРодитель(Знач пПуть)
	
	Файл = Новый Файл(пПуть);
	Возврат Файл.Путь;
	
КонецФункции

// Есть глобальный метод ФайлСуществует, но он не проверяет, что это файл
Функция фФайлСуществует(Знач пФайл)
	
	Файл = Новый Файл(пФайл);
	Возврат Файл.Существует() И Файл.ЭтоФайл();
	
КонецФункции

Функция КаталогСуществует(Знач пКаталог)
	
	Файл = Новый Файл(пКаталог);
	Возврат Файл.Существует() И Файл.ЭтоКаталог();
	
КонецФункции

#КонецОбласти

#КонецОбласти